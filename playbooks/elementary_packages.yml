---
- name: Install Elementary OS specific packages
  gather_facts: true
  user: root
  hosts: all
  vars_files:
    - ["vars/{{ ansible_lsb.id }}_defaults.yml", "vars/ubuntu_defaults.yml"]
    - [
        "vars/{{ ansible_lsb.id }}_{{ansible_lsb.codename}}.yml",
        "vars/most_codenames.yml",
      ]
  vars:
    # You can override install mode from command line
    # with -e "mode=<mode>" [all|dev|basic]
    package_categories:
      - basic # always installed
      - development # dev/all
      - extras # all
      - games # always installed
      - nepali # always installed
      - virtualization # all

    snap_packages:
      - lxd
      - mailspring
      - caprine
      - superproductivity

    common_flatpak_packages:
      - us.zoom.Zoom
      - com.jgraph.drawio.desktop
      - com.viber.Viber
      - com.dropbox.Client
      - io.typora.Typora
      - com.github.marktext.marktext
      - com.spotify.Client
      - io.atom.Atom
      - com.wps.Office
      - com.meetfranz.Franz
      - com.jetbrains.PyCharm-Community"
      - Bitwarden

    flatpak_packages: "{{ common_flatpak_packages|union(distro_flatpaks) }}"
    npm_packages:
      - hacksalot/hackmyresume
      - gitbook-cli

  tasks:
    # Include package categories
    - include_vars:
        file: "packages/{{ item }}.yml"
      loop: "{{ package_categories }}"

    - name: Ubuntu Universe PPA
      apt_repository:
        repo: "deb http://archive.ubuntu.com/ubuntu {{ubuntu_codename}} universe"
        state: present

    - name: Docker Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present
      when: install_mode == "all" or install_mode == "dev"

    - name: Docker Repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ubuntu_codename}} stable"
        filename: docker
        state: present
      when: install_mode == "all" or install_mode == "dev"

    - name: Jonathon F's PPA for latest vim
      apt_repository:
        repo: "ppa:jonathonf/vim"
        state: present
        filename: jonathonf

    - name: Brave Key
      apt_key:
        url: https://brave-browser-apt-release.s3.brave.com/brave-core.asc
        state: present

    - name: Brave Repository
      apt_repository:
        repo: "deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"
        state: present
        filename: brave

    - name: VSCode Key
      apt_key:
        url: https://packages.microsoft.com/keys/microsoft.asc
        state: present
      when: install_mode == "all" or install_mode == "dev"

    - name: VSCode Trusted GPG Key
      shell: |
        curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > packages.microsoft.gpg
        install -o root -g root -m 644 packages.microsoft.gpg /etc/apt/trusted.gpg.d/
      args:
        warn: false # turn warning off, since curl is part of a pipe here
      when: install_mode == "all" or install_mode == "dev"

    - name: VSCode Repository
      apt_repository:
        repo: "deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/packages.microsoft.gpg] https://packages.microsoft.com/repos/vscode stable main"
        state: present
        filename: vscode
      when: install_mode == "all" or install_mode == "dev"

    - name: Add Insync Key From Ubuntu Keyserver
      apt_key:
        keyserver: keyserver.ubuntu.com
        id: ACCAF35C
      when: install_mode == "all"

    - name: Insync Repository
      apt_repository:
        repo: "deb http://apt.insync.io/ubuntu {{ubuntu_codename}} non-free contrib"
        state: present
        filename: insync
      when: install_mode == "all"

    - name: Check if freeoffice is already installed
      command: dpkg-query -W softmaker-freeoffice-2018
      register: freeoffice2018_check_deb
      failed_when: freeoffice2018_check_deb.rc > 1
      changed_when: freeoffice2018_check_deb.rc == 1

    - name: Install freeoffice from deb
      apt:
        deb: https://www.freeoffice.com/download.php?filename=https://www.softmaker.net/down/softmaker-freeoffice-2018_976-01_amd64.deb
      when: freeoffice2018_check_deb.rc == 1

    - name: Add freeoffice repository using script in installed deb
      command: /usr/share/freeoffice2018/add_apt_repo.sh
      when: freeoffice2018_check_deb.rc == 1

    - name: Upgrade Packages
      apt:
        update_cache: "True"
        upgrade: "True"

    - name: Install basic packages
      apt:
        name: "{{ distro_packages + release_packages + basic_packages + games_packages + nepali_packages }}"
        state: present

    - name: Install development packages
      apt:
        name: "{{ development_packages }}"
        state: present
      when: install_mode == "all" or install_mode == "dev"

    - name: Install virtualization packages and extras
      apt:
        name: "{{ development_packages + extras_packages }}"
        state: present
      when: install_mode == "all"

    - name: Hide libvert-qemu user from login screen
      copy:
        src: "elementary/system/AccountServices/system-user"
        dest: "/var/lib/AccountsService/users/libvirt-qemu"
      when: install_mode == "all"

    ############################ Flatpak installations ############################

    #First - add flathub repository if not yet present
    - name: Add the flathub flatpak repository remote to the user installation
      flatpak_remote:
        name: flathub
        state: present
        flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo

    - name: "Install flatpak packages: {{ flatpak_packages }}"
      community.general.flatpak:
        name: "{{ item }}"
        state: present
      loop: "{{ flatpak_packages }}"

    ############################ End Flatpak installations ############################

    - name: "Install snap packages: {{ snap_packages }}"
      snap:
        name: "{{ item }}"
        state: present
      loop: "{{ snap_packages }}"

    - name: "Install npm packages: {{ npm_packages }}"
      npm:
        name: "{{ item }}"
        global: yes
      loop: "{{ npm_packages }}"

    ############################ End NPM installations ############################
    #Now that we have finished installing software, add user to a few groups
    - name: get the username running the deploy
      become: false
      local_action: command whoami
      register: username_on_the_host

    - name: "Add user {{username_on_the_host.stdout}} to groups lxd, docker"
      user:
        name: "{{username_on_the_host.stdout}}"
        groups: lxd, docker
        append: yes
